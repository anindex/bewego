#include <bewego/rnn.h>
#include <gtest/gtest.h>

#include <iostream>
#include <memory>
#include <random>

using namespace bewego;
using std::cout;
using std::endl;


std::shared_ptr<RNNCell> cell;
static const uint32_t NB_TESTS = 10;
static const unsigned int SEED = 0;


// ------------------------------------------------------------
// GRUCell Tests
// ------------------------------------------------------------

TEST(rnn, GRUCell) {
  std::srand(SEED);
  int input_dim = 10;
  int hidden_dim = 5;

  // Define some Weights of network
  Eigen::MatrixXd Wi(hidden_dim, input_dim);
  Wi << -0.4564914,  -0.17615029,  0.03555354, -0.06883851, -0.4104247,  -0.25689125, -0.4558768,   0.334653,    0.11938193, -0.43037006,-0.41630527,  0.24663875,  0.27992985, -0.12892786,  0.00220215, -0.04365954,   0.43366984, -0.21657538, -0.28338867,  0.37674496, -0.08320442, -0.34251988, -0.35411447, -0.36097276,  0.37581173, -0.10397068, 0.34997538,  0.29020074,  0.19558474,  0.35133627,-0.38008535, -0.46894246, -0.30263302, -0.33383775,  0.14305606,  0.33356807, -0.27884316,  0.46353087, -0.14356521,  0.45651403, 0.09242937,  0.3971803,  -0.31729805, -0.1500293,   0.44432482,  0.04678091, 0.19175121,  0.24666837, -0.1539267,   0.23100808;
  Eigen::MatrixXd Wr(hidden_dim, input_dim);
  Wr << 0.3480887,  -0.4315215,   0.24033299, -0.26282042,  0.13856277,  0.2419335,  0.26598212, -0.15462285,  0.28686795, -0.36391452,-0.17174852,  0.17799655,  0.2281889,   0.41463384, -0.45857537, -0.37547418,  0.18998298,  0.28655466, -0.02973923, -0.026986,  0.3714969,   0.19672671, -0.36115754,  0.04316679,  0.0796161,   0.46883115,  -0.2255666,   0.05814275, -0.02603745,  0.43824163,-0.4403688,   0.37806204, -0.11772841,  0.32927004, -0.45343214,  0.04004911,  0.14411989,  0.30362335,  0.38673517,  0.23825362, 0.10884395, -0.406827,    0.10571077, -0.26945972,  0.12472478,  0.44739833, -0.3861917,  -0.28276193, -0.38895416, -0.14111179;
  Eigen::MatrixXd Wn(hidden_dim, input_dim);
  Wn << 0.07617292, -0.12431374, -0.02885842, -0.23949671,  0.11968985,  0.26639476,  0.46876928,  0.29540852,  0.01948425,  0.37922958, 0.40295258, -0.3520896,  -0.4501157,  -0.11706218,  0.01605859,  0.45794556, -0.07845753,  0.21763548,  0.06285748, -0.12616971,-0.09050682,  0.0284473,  -0.22653604,  0.02082661,  0.2556865,   0.32853755, -0.36065707,  0.20740291,  0.07124111,  0.29110983,-0.10803092,  0.3513442,   0.18832865,  0.00206167, -0.06870198, -0.03067362, -0.02636802, -0.37062472,  0.20229575,  0.2527236, 0.30402854,  0.11747703,  0.35885403, -0.21599919,  0.42318425, -0.45626912,  0.1536791,   0.23532012,  0.12999526,  0.07633385;
  Eigen::MatrixXd Ri(hidden_dim, hidden_dim);
  Ri << 0.32440996,  0.04606375, -0.7234743,  -0.11467623, -0.03119978, 0.23199055, -0.42315856,  0.20647341, -0.2576366,   0.3778973, 0.28606308, -0.4067016,   0.0847418,  -0.25670436,  0.32740274, 0.04492975, -0.11105564, -0.1939374,   0.08914144, -0.02091352,-0.4117562,   0.2032822,  -0.08775299, -0.00502395,  0.25985414;
  Eigen::MatrixXd Rr(hidden_dim, hidden_dim);
  Rr << -0.16618793,  0.01512312,  0.01689957, -0.18874097, -0.12067243,-0.00470024, -0.15219548, -0.36541128, -0.19763643, -0.19121823, 0.23982273, -0.05125989, -0.05457193,  0.38058558,  0.14214718, 0.36777046, -0.05203057,  0.14226463,  0.4362469,  -0.08785585, 0.31158158,  0.21782531, -0.01665671, -0.24140908,  0.1819984;
  Eigen::MatrixXd Rn(hidden_dim, hidden_dim);
  Rn << -0.27791372, -0.5059309,   0.10901733, -0.24502274, -0.395761, 0.08052875, -0.20694932, -0.2856832,  -0.01713017, -0.29905805, 0.24954982,  0.1812261,   0.22362477, -0.24665752, -0.3514739, 0.34807444,  0.18090107,  0.28325891, -0.06472828, -0.42563537, 0.05384328,  0.39901733,  0.02027629, -0.5031169,   0.1346481;
  Eigen::VectorXd bWi(5);
  bWi << 0.02424372, -0.00017972,  0.04387046, -0.03932345, -0.00382559;
  Eigen::VectorXd bWr(5);
  bWr <<-0.00021465,  0.02782775,  0.02948225,  0.00676898, -0.0465608;
  Eigen::VectorXd bWn(5);
  bWn <<  0.02780546,  0.04068475, -0.04340197, -0.00061269, -0.03352709;
  Eigen::VectorXd bRi(5);
  bRi <<-0.02537247,  0.03061244, -0.04947124,  0.0103976,   0.04996398;
  Eigen::VectorXd bRr(5);
  bRr <<-0.04806404,  0.04746732,  0.00459218, -0.04571192,  0.04511609;
  Eigen::VectorXd bRn(5);
  bRn << -0.03702344, -0.00909172,  0.01727532, -0.03171693, -0.04461131;

  // Define cell
  cell = std::make_shared<GRUCell>(input_dim, hidden_dim, Wi, Wr, Wn, Ri, Rr, Rn, bWi, bWr, bWn, bRi, bRr, bRn);

  // Define some input and hidden state
  Eigen::VectorXd input(input_dim);
  input << 0.5290276,  0.7327721,  0.6911962,  0.05786538, 0.09304965, 0.584586, 0.61762,    0.3953966,  0.94769645, 0.20552337;
  Eigen::VectorXd hidden(hidden_dim);
  hidden << 0.34783638, 0.44527376, 0.2156825,  0.3274474,  0.48278618;

  // correct output and Jacobians
  Eigen::VectorXd correct_output(hidden_dim);
  correct_output << 0.29119107, 0.18848863, 0.09097766, 0.35629278, 0.49600834;
  Eigen::MatrixXd correct_jac(hidden_dim, input_dim);
  correct_jac << 0.00690481, -0.04095821, -0.04009594, -0.12736347,  0.05483014,  0.14029875, 0.2618169,   0.20664708, -0.01249528,  0.26507983, 0.1283708,  -0.12942834, -0.17042743, -0.08387072,  0.02217716,  0.21167417, 0.01928554,  0.05836866, -0.01041208, -0.0031769, -0.05098338, -0.00766712, -0.13417222, -0.01230904,  0.15059532,  0.15605356, -0.15712716,  0.12125358,  0.04774194,  0.1659792, -0.05842443,  0.20597228,  0.11073236,  0.00459062, -0.04097533, -0.02077874, -0.0123234,  -0.21660005,  0.11745875,  0.14044708, 0.0894543,   0.02992964,  0.10886602, -0.0636477,   0.12191206, -0.13329482,  0.04232266,  0.06639994,  0.03805242,  0.02014978;
  Eigen::MatrixXd correct_jac_h(hidden_dim, hidden_dim);
  correct_jac_h << 0.24600264, -0.18025333,  0.0238856,  -0.07138602, -0.12978539, 0.04999841,  0.44522485, -0.0212807,  -0.03339943, -0.00578208, 0.09761075,  0.03288609,  0.5790392,  -0.09607671, -0.09273393, 0.13664405,  0.07218964,  0.11334933,  0.30982944, -0.1672296, 0.0106832,   0.04515778,  0.00296021, -0.05879372,  0.61200553;

  // Calculate and check Forward
  Eigen::VectorXd output, h_new;
  std::tie(output, h_new) = cell->Forward(input, hidden);
  ASSERT_TRUE(output.isApprox(correct_output, 1e-5));

  // Calculate and check Jacobians
  Eigen::MatrixXd dodx, dodh, dhdx, dhdh;
  std::tie(dodx, dodh, dhdx, dhdh) = cell->Jacobian(input, hidden);
  ASSERT_TRUE(dodx.isApprox(correct_jac, 1e-5));
  ASSERT_TRUE(dodh.isApprox(correct_jac_h, 1e-5));
}


// ------------------------------------------------------------
// StackedGRUCell test
// ------------------------------------------------------------

TEST(rnn, StackedGRUCell) {
  std::srand(SEED);
  int input_dim = 5;
  int hidden_dim = 4;
  int rnn_layers = 2;
  int output_dim = 5;

    // Define some Weights of network
  Eigen::MatrixXd l1Wi(hidden_dim, input_dim);
  Eigen::MatrixXd l1Wr(hidden_dim, input_dim);
  Eigen::MatrixXd l1Wn(hidden_dim, input_dim);
  Eigen::MatrixXd l1Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l1bWi(hidden_dim);
  Eigen::VectorXd l1bWr(hidden_dim);
  Eigen::VectorXd l1bWn(hidden_dim);
  Eigen::VectorXd l1bRi(hidden_dim);
  Eigen::VectorXd l1bRr(hidden_dim);
  Eigen::VectorXd l1bRn(hidden_dim);
  l1Wi << -0.24717039, 0.08585358, 0.21371347, 0.10180277, 0.07480085, -0.34865102, -0.1606968, 0.038886607, 0.5727128, 0.36248237, 0.04205048, -0.094438374, 0.30478412, 0.49289477, 0.09971976, 0.07278472, 0.1545307, -0.5377429, -0.42576504, -0.47155598;
  l1Wr << -0.09900546, 0.49168313, -0.5342384, -0.47816342, 0.52862525, 0.36575413, 0.19206548, 0.29911578, 0.12627757, -0.25831193, -0.008049786, 0.39622563, -0.38887516, -0.38268596, 0.06279689, 0.5918658, -0.49433154, -0.2234543, 0.02144897, -0.26199928;
  l1Wn << 0.23375618, -0.26168483, -0.24788481, 0.5728452, -0.4996227, -0.4451225, -0.57564425, -0.47466204, -0.38523144, -0.13130063, 0.2492994, 0.26897186, -0.39724237, -0.5398701, -0.51113987, 0.1929785, 0.315507, 0.32040995, 0.11589652, -0.5442631;
  l1Ri << 0.27225327, 0.1233796, -0.12901936, 0.22767149, -0.04530505, -0.2725925, -0.5375645, 0.6950712, 0.20488907, -0.21331468, -0.07981182, 0.0678088, -0.70477146, 0.45468533, -0.18903719, 0.12117217;
  l1Rr << -0.38362607, -0.35768405, 0.42593458, 0.15196997, -0.034034654, 0.017118583, -0.51679564, -0.46177343, -0.032581285, 0.34339952, -0.13895734, -0.039340068, 0.18508019, -0.015158445, -0.2845649, -0.03805448;
  l1Rn << -0.3531419, -0.34328088, -0.020022772, 0.002952155, 0.04921763, 0.5067098, 0.16366728, 0.31402367, -0.050379254, 0.031886574, 0.021551719, -0.22738008, -0.26801136, -0.1903461, -0.27538475, -0.23688489;
  l1bWi << -0.03047862, 0.024017323, -0.0012198202, 0.037532035;
  l1bWr << -0.009288669, -0.04854518, 0.02095418, -0.013448976;
  l1bWn << 0.008085571, 0.04008391, -0.03681774, 0.004496753;
  l1bRi << 0.019692648, -0.049587466, -0.013591636, 0.0065414086;
  l1bRr << -0.018666841, 0.014909271, 0.049664948, -0.04471891;
  l1bRn << 0.039086785, -0.023239149, -0.0059368834, 0.023705017;

  std::shared_ptr<GRUCell> l1 = std::make_shared<GRUCell>(input_dim, hidden_dim, l1Wi, l1Wr, l1Wn, l1Ri, l1Rr, l1Rn, l1bWi, l1bWr, l1bWn, l1bRi, l1bRr, l1bRn);

  Eigen::MatrixXd l2Wi(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wn(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l2bWi(hidden_dim);
  Eigen::VectorXd l2bWr(hidden_dim);
  Eigen::VectorXd l2bWn(hidden_dim);
  Eigen::VectorXd l2bRi(hidden_dim);
  Eigen::VectorXd l2bRr(hidden_dim);
  Eigen::VectorXd l2bRn(hidden_dim);
  l2Wi << -0.3978763, -0.46467334, 0.3019699, -0.3885302, -0.22293517, 0.53549725, 0.22477973, -0.42408437, 0.4354549, -0.3233698, 0.23365223, -0.51845896, -0.10133666, 0.37064213, 0.3562914, 0.39103013;
  l2Wr << -0.3234307, -0.497563, 0.40302628, 0.28900397, -0.33605248, -0.52361655, 0.11769223, 0.48851424, 0.121284485, -0.50958526, -0.32413572, 0.058276594, 0.4027974, -0.36251706, -0.20634815, -0.02828288;
  l2Wn << 0.11966795, 0.17235267, -0.595414, 0.37491268, -0.013094544, 0.2948256, 0.26128626, 0.35623407, -0.4696025, 0.24340755, -0.35118607, -0.40362686, -0.1122666, 0.16729432, 0.583301, 0.45402592;
  l2Ri << 0.46344972, 0.48512715, -0.037570003, -0.13281189, -0.14031686, -0.2969325, -0.036060177, -0.13484095, 0.3501108, 0.22727486, 0.33511832, 0.3503731, -0.48886812, 0.246081, -0.08291795, -0.16208328;
  l2Rr << 0.24814275, 0.0964873, 0.13671811, -0.12035131, -0.18957555, 0.65949494, -0.2972508, -0.26457286, 0.14810836, -0.16102539, -0.008828487, 0.03315221, 0.2358216, -0.057799075, 0.23450689, -0.51743346;
  l2Rn << -0.02580187, -0.22412364, -0.2318453, -0.3988015, -0.1632087, 0.081707634, 0.213241, 0.19013147, 0.2063689, -0.12486108, 0.20190822, -0.4938096, -0.39875215, 0.1351363, 0.7589443, -0.15095167;
  l2bWi << -0.010270156, 0.016616646, -0.03487699, 0.048187423;
  l2bWr << 0.025105428, 0.0118098855, 0.02496973, 0.03060491;
  l2bWn << -0.02731942, -0.04309566, 0.0013983026, 0.028680634;
  l2bRi << -0.036964037, -0.018033959, -0.048454236, -0.015519381;
  l2bRr << -0.00221733, 0.0042694435, 0.041459348, -0.030814542;
  l2bRn << 0.030424062, -0.015604068, 0.03658164, 0.029889192;
  std::shared_ptr<GRUCell> l2 = std::make_shared<GRUCell>(input_dim, hidden_dim, l2Wi, l2Wr, l2Wn, l2Ri, l2Rr, l2Rn, l2bWi, l2bWr, l2bWn, l2bRi, l2bRr, l2bRn);

  Eigen::MatrixXd  Wdense(hidden_dim, output_dim);
  Wdense << -0.00089377863, -0.0006215332, 0.00094453676, -0.0009734893, -0.00067751575, 0.00018901879, 0.0009916049, 0.00022596691, -0.00067325647, 0.0007263683, -0.00078124885, 0.0007563792, 0.0005161086, -0.00061712624, -4.5387773e-05, 0.00060126476, -0.00040319585, -0.00031461118, -0.0005285564, 0.00032444904;
  Eigen::VectorXd bdense(output_dim);
  bdense << 0.027660895, 0.03518821, 0.032912854, -0.00055333227, -0.027137328;
  std::vector<std::shared_ptr<GRUCell>> cells = {l1, l2};
  cell = std::make_shared<StackedGRUCell>(rnn_layers, hidden_dim, cells, Wdense, bdense);

  Eigen::VectorXd inp(input_dim);
  inp << 0.52861595, 0.13201344, 0.71844697, 0.5612465, 0.5696361;
  Eigen::VectorXd states(hidden_dim*rnn_layers);
  states << 0.35929263, 0.19600296, 0.026519418, 0.06038356, 0.094920635, 0.78148305, 0.82439435, 0.5376601;

  Eigen::VectorXd output, h_new;
  std::tie(output, h_new) = cell->Forward(inp, states);
  Eigen::VectorXd correct_output(output_dim);
  correct_output << 0.02758394,  0.03573444,  0.03309195, -0.00122853, -0.02679642;
  ASSERT_TRUE(output.isApprox(correct_output, 1e-5));
  Eigen::VectorXd correct_states(hidden_dim*rnn_layers);
  correct_states << 0.15862198, -0.18223548, -0.2134189, 0.066820554, -0.029244214, 0.3086748, 0.48912185, 0.36703357;
  ASSERT_TRUE(h_new.isApprox(correct_states, 1e-5));
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
