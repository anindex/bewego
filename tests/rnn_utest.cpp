#include <bewego/rnn.h>
#include <gtest/gtest.h>

#include <iostream>
#include <memory>
#include <random>
#include <chrono>

using namespace bewego;
using std::cout;
using std::endl;

static const uint32_t NB_TESTS = 10;
static const unsigned int SEED = 0;


// ------------------------------------------------------------
// GRUCell Tests
// ------------------------------------------------------------

TEST(rnn, GRUCell) {
  std::shared_ptr<CoupledRNNCell> cell;
  std::srand(SEED);
  int input_dim = 10;
  int hidden_dim = 5;

  // Define some Weights of network
  Eigen::MatrixXd Wi(hidden_dim, input_dim);
  Wi << -0.4564914,  -0.17615029,  0.03555354, -0.06883851, -0.4104247,  -0.25689125, -0.4558768,   0.334653,    0.11938193, -0.43037006,-0.41630527,  0.24663875,  0.27992985, -0.12892786,  0.00220215, -0.04365954,   0.43366984, -0.21657538, -0.28338867,  0.37674496, -0.08320442, -0.34251988, -0.35411447, -0.36097276,  0.37581173, -0.10397068, 0.34997538,  0.29020074,  0.19558474,  0.35133627,-0.38008535, -0.46894246, -0.30263302, -0.33383775,  0.14305606,  0.33356807, -0.27884316,  0.46353087, -0.14356521,  0.45651403, 0.09242937,  0.3971803,  -0.31729805, -0.1500293,   0.44432482,  0.04678091, 0.19175121,  0.24666837, -0.1539267,   0.23100808;
  Eigen::MatrixXd Wr(hidden_dim, input_dim);
  Wr << 0.3480887,  -0.4315215,   0.24033299, -0.26282042,  0.13856277,  0.2419335,  0.26598212, -0.15462285,  0.28686795, -0.36391452,-0.17174852,  0.17799655,  0.2281889,   0.41463384, -0.45857537, -0.37547418,  0.18998298,  0.28655466, -0.02973923, -0.026986,  0.3714969,   0.19672671, -0.36115754,  0.04316679,  0.0796161,   0.46883115,  -0.2255666,   0.05814275, -0.02603745,  0.43824163,-0.4403688,   0.37806204, -0.11772841,  0.32927004, -0.45343214,  0.04004911,  0.14411989,  0.30362335,  0.38673517,  0.23825362, 0.10884395, -0.406827,    0.10571077, -0.26945972,  0.12472478,  0.44739833, -0.3861917,  -0.28276193, -0.38895416, -0.14111179;
  Eigen::MatrixXd Wn(hidden_dim, input_dim);
  Wn << 0.07617292, -0.12431374, -0.02885842, -0.23949671,  0.11968985,  0.26639476,  0.46876928,  0.29540852,  0.01948425,  0.37922958, 0.40295258, -0.3520896,  -0.4501157,  -0.11706218,  0.01605859,  0.45794556, -0.07845753,  0.21763548,  0.06285748, -0.12616971,-0.09050682,  0.0284473,  -0.22653604,  0.02082661,  0.2556865,   0.32853755, -0.36065707,  0.20740291,  0.07124111,  0.29110983,-0.10803092,  0.3513442,   0.18832865,  0.00206167, -0.06870198, -0.03067362, -0.02636802, -0.37062472,  0.20229575,  0.2527236, 0.30402854,  0.11747703,  0.35885403, -0.21599919,  0.42318425, -0.45626912,  0.1536791,   0.23532012,  0.12999526,  0.07633385;
  Eigen::MatrixXd Ri(hidden_dim, hidden_dim);
  Ri << 0.32440996,  0.04606375, -0.7234743,  -0.11467623, -0.03119978, 0.23199055, -0.42315856,  0.20647341, -0.2576366,   0.3778973, 0.28606308, -0.4067016,   0.0847418,  -0.25670436,  0.32740274, 0.04492975, -0.11105564, -0.1939374,   0.08914144, -0.02091352,-0.4117562,   0.2032822,  -0.08775299, -0.00502395,  0.25985414;
  Eigen::MatrixXd Rr(hidden_dim, hidden_dim);
  Rr << -0.16618793,  0.01512312,  0.01689957, -0.18874097, -0.12067243,-0.00470024, -0.15219548, -0.36541128, -0.19763643, -0.19121823, 0.23982273, -0.05125989, -0.05457193,  0.38058558,  0.14214718, 0.36777046, -0.05203057,  0.14226463,  0.4362469,  -0.08785585, 0.31158158,  0.21782531, -0.01665671, -0.24140908,  0.1819984;
  Eigen::MatrixXd Rn(hidden_dim, hidden_dim);
  Rn << -0.27791372, -0.5059309,   0.10901733, -0.24502274, -0.395761, 0.08052875, -0.20694932, -0.2856832,  -0.01713017, -0.29905805, 0.24954982,  0.1812261,   0.22362477, -0.24665752, -0.3514739, 0.34807444,  0.18090107,  0.28325891, -0.06472828, -0.42563537, 0.05384328,  0.39901733,  0.02027629, -0.5031169,   0.1346481;
  Eigen::VectorXd bWi(5);
  bWi << 0.02424372, -0.00017972,  0.04387046, -0.03932345, -0.00382559;
  Eigen::VectorXd bWr(5);
  bWr <<-0.00021465,  0.02782775,  0.02948225,  0.00676898, -0.0465608;
  Eigen::VectorXd bWn(5);
  bWn <<  0.02780546,  0.04068475, -0.04340197, -0.00061269, -0.03352709;
  Eigen::VectorXd bRi(5);
  bRi <<-0.02537247,  0.03061244, -0.04947124,  0.0103976,   0.04996398;
  Eigen::VectorXd bRr(5);
  bRr <<-0.04806404,  0.04746732,  0.00459218, -0.04571192,  0.04511609;
  Eigen::VectorXd bRn(5);
  bRn << -0.03702344, -0.00909172,  0.01727532, -0.03171693, -0.04461131;

  // Define cell
  cell = std::make_shared<GRUCell>(Wi, Wr, Wn, Ri, Rr, Rn, bWi, bWr, bWn, bRi, bRr, bRn);

  // Define some input and hidden state
  Eigen::VectorXd input(input_dim);
  input << 0.5290276,  0.7327721,  0.6911962,  0.05786538, 0.09304965, 0.584586, 0.61762,    0.3953966,  0.94769645, 0.20552337;
  Eigen::VectorXd hidden(hidden_dim);
  hidden << 0.34783638, 0.44527376, 0.2156825,  0.3274474,  0.48278618;

  // correct output and Jacobians
  Eigen::VectorXd correct_output(hidden_dim);
  correct_output << 0.29119107, 0.18848863, 0.09097766, 0.35629278, 0.49600834;
  Eigen::MatrixXd correct_jac(hidden_dim, input_dim);
  correct_jac << 0.00690481, -0.04095821, -0.04009594, -0.12736347,  0.05483014,  0.14029875, 0.2618169,   0.20664708, -0.01249528,  0.26507983, 0.1283708,  -0.12942834, -0.17042743, -0.08387072,  0.02217716,  0.21167417, 0.01928554,  0.05836866, -0.01041208, -0.0031769, -0.05098338, -0.00766712, -0.13417222, -0.01230904,  0.15059532,  0.15605356, -0.15712716,  0.12125358,  0.04774194,  0.1659792, -0.05842443,  0.20597228,  0.11073236,  0.00459062, -0.04097533, -0.02077874, -0.0123234,  -0.21660005,  0.11745875,  0.14044708, 0.0894543,   0.02992964,  0.10886602, -0.0636477,   0.12191206, -0.13329482,  0.04232266,  0.06639994,  0.03805242,  0.02014978;
  Eigen::MatrixXd correct_jac_h(hidden_dim, hidden_dim);
  correct_jac_h << 0.24600264, -0.18025333,  0.0238856,  -0.07138602, -0.12978539, 0.04999841,  0.44522485, -0.0212807,  -0.03339943, -0.00578208, 0.09761075,  0.03288609,  0.5790392,  -0.09607671, -0.09273393, 0.13664405,  0.07218964,  0.11334933,  0.30982944, -0.1672296, 0.0106832,   0.04515778,  0.00296021, -0.05879372,  0.61200553;

  // Calculate and check Forward
  Eigen::VectorXd output;
  output = cell->Forward(input, hidden);
  ASSERT_TRUE(output.isApprox(correct_output, 1e-5));

  // Calculate and check Jacobians
  Eigen::MatrixXd dodx, dodh;
  std::tie(dodx, dodh) = cell->Jacobian(input, hidden);
  ASSERT_TRUE(dodx.isApprox(correct_jac, 1e-5));
  ASSERT_TRUE(dodh.isApprox(correct_jac_h, 1e-5));
}


// ------------------------------------------------------------
// StackedGRUCell test
// ------------------------------------------------------------

TEST(rnn, StackedGRUCell) {
  std::shared_ptr<RNNCell> cell;
  std::srand(SEED);
  int input_dim = 5;
  int hidden_dim = 4;
  int rnn_layers = 2;
  int output_dim = 5;

  // Define some Weights of network
  Eigen::MatrixXd l1Wi(hidden_dim, input_dim);
  Eigen::MatrixXd l1Wr(hidden_dim, input_dim);
  Eigen::MatrixXd l1Wn(hidden_dim, input_dim);
  Eigen::MatrixXd l1Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l1bWi(hidden_dim);
  Eigen::VectorXd l1bWr(hidden_dim);
  Eigen::VectorXd l1bWn(hidden_dim);
  Eigen::VectorXd l1bRi(hidden_dim);
  Eigen::VectorXd l1bRr(hidden_dim);
  Eigen::VectorXd l1bRn(hidden_dim);
  l1Wi << -0.24717039, 0.08585358, 0.21371347, 0.10180277, 0.07480085, -0.34865102, -0.1606968, 0.038886607, 0.5727128, 0.36248237, 0.04205048, -0.094438374, 0.30478412, 0.49289477, 0.09971976, 0.07278472, 0.1545307, -0.5377429, -0.42576504, -0.47155598;
  l1Wr << -0.09900546, 0.49168313, -0.5342384, -0.47816342, 0.52862525, 0.36575413, 0.19206548, 0.29911578, 0.12627757, -0.25831193, -0.008049786, 0.39622563, -0.38887516, -0.38268596, 0.06279689, 0.5918658, -0.49433154, -0.2234543, 0.02144897, -0.26199928;
  l1Wn << 0.23375618, -0.26168483, -0.24788481, 0.5728452, -0.4996227, -0.4451225, -0.57564425, -0.47466204, -0.38523144, -0.13130063, 0.2492994, 0.26897186, -0.39724237, -0.5398701, -0.51113987, 0.1929785, 0.315507, 0.32040995, 0.11589652, -0.5442631;
  l1Ri << 0.27225327, 0.1233796, -0.12901936, 0.22767149, -0.04530505, -0.2725925, -0.5375645, 0.6950712, 0.20488907, -0.21331468, -0.07981182, 0.0678088, -0.70477146, 0.45468533, -0.18903719, 0.12117217;
  l1Rr << -0.38362607, -0.35768405, 0.42593458, 0.15196997, -0.034034654, 0.017118583, -0.51679564, -0.46177343, -0.032581285, 0.34339952, -0.13895734, -0.039340068, 0.18508019, -0.015158445, -0.2845649, -0.03805448;
  l1Rn << -0.3531419, -0.34328088, -0.020022772, 0.002952155, 0.04921763, 0.5067098, 0.16366728, 0.31402367, -0.050379254, 0.031886574, 0.021551719, -0.22738008, -0.26801136, -0.1903461, -0.27538475, -0.23688489;
  l1bWi << -0.03047862, 0.024017323, -0.0012198202, 0.037532035;
  l1bWr << -0.009288669, -0.04854518, 0.02095418, -0.013448976;
  l1bWn << 0.008085571, 0.04008391, -0.03681774, 0.004496753;
  l1bRi << 0.019692648, -0.049587466, -0.013591636, 0.0065414086;
  l1bRr << -0.018666841, 0.014909271, 0.049664948, -0.04471891;
  l1bRn << 0.039086785, -0.023239149, -0.0059368834, 0.023705017;

  std::shared_ptr<CoupledRNNCell> l1 = std::make_shared<GRUCell>(l1Wi, l1Wr, l1Wn, l1Ri, l1Rr, l1Rn, l1bWi, l1bWr, l1bWn, l1bRi, l1bRr, l1bRn);

  Eigen::MatrixXd l2Wi(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wn(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l2bWi(hidden_dim);
  Eigen::VectorXd l2bWr(hidden_dim);
  Eigen::VectorXd l2bWn(hidden_dim);
  Eigen::VectorXd l2bRi(hidden_dim);
  Eigen::VectorXd l2bRr(hidden_dim);
  Eigen::VectorXd l2bRn(hidden_dim);
  l2Wi << -0.3978763, -0.46467334, 0.3019699, -0.3885302, -0.22293517, 0.53549725, 0.22477973, -0.42408437, 0.4354549, -0.3233698, 0.23365223, -0.51845896, -0.10133666, 0.37064213, 0.3562914, 0.39103013;
  l2Wr << -0.3234307, -0.497563, 0.40302628, 0.28900397, -0.33605248, -0.52361655, 0.11769223, 0.48851424, 0.121284485, -0.50958526, -0.32413572, 0.058276594, 0.4027974, -0.36251706, -0.20634815, -0.02828288;
  l2Wn << 0.11966795, 0.17235267, -0.595414, 0.37491268, -0.013094544, 0.2948256, 0.26128626, 0.35623407, -0.4696025, 0.24340755, -0.35118607, -0.40362686, -0.1122666, 0.16729432, 0.583301, 0.45402592;
  l2Ri << 0.46344972, 0.48512715, -0.037570003, -0.13281189, -0.14031686, -0.2969325, -0.036060177, -0.13484095, 0.3501108, 0.22727486, 0.33511832, 0.3503731, -0.48886812, 0.246081, -0.08291795, -0.16208328;
  l2Rr << 0.24814275, 0.0964873, 0.13671811, -0.12035131, -0.18957555, 0.65949494, -0.2972508, -0.26457286, 0.14810836, -0.16102539, -0.008828487, 0.03315221, 0.2358216, -0.057799075, 0.23450689, -0.51743346;
  l2Rn << -0.02580187, -0.22412364, -0.2318453, -0.3988015, -0.1632087, 0.081707634, 0.213241, 0.19013147, 0.2063689, -0.12486108, 0.20190822, -0.4938096, -0.39875215, 0.1351363, 0.7589443, -0.15095167;
  l2bWi << -0.010270156, 0.016616646, -0.03487699, 0.048187423;
  l2bWr << 0.025105428, 0.0118098855, 0.02496973, 0.03060491;
  l2bWn << -0.02731942, -0.04309566, 0.0013983026, 0.028680634;
  l2bRi << -0.036964037, -0.018033959, -0.048454236, -0.015519381;
  l2bRr << -0.00221733, 0.0042694435, 0.041459348, -0.030814542;
  l2bRn << 0.030424062, -0.015604068, 0.03658164, 0.029889192;
  std::shared_ptr<CoupledRNNCell> l2 = std::make_shared<GRUCell>(l2Wi, l2Wr, l2Wn, l2Ri, l2Rr, l2Rn, l2bWi, l2bWr, l2bWn, l2bRi, l2bRr, l2bRn);

  Eigen::MatrixXd  Wdense(hidden_dim, output_dim);
  Wdense << -0.00089377863, -0.0006215332, 0.00094453676, -0.0009734893, -0.00067751575, 0.00018901879, 0.0009916049, 0.00022596691, -0.00067325647, 0.0007263683, -0.00078124885, 0.0007563792, 0.0005161086, -0.00061712624, -4.5387773e-05, 0.00060126476, -0.00040319585, -0.00031461118, -0.0005285564, 0.00032444904;
  Eigen::VectorXd bdense(output_dim);
  bdense << 0.027660895, 0.03518821, 0.032912854, -0.00055333227, -0.027137328;
  std::vector<std::shared_ptr<CoupledRNNCell>> cells = {l1, l2};
  cell = std::make_shared<StackedCoupledRNNCell>(rnn_layers, hidden_dim, output_dim, cells, Wdense, bdense);

  Eigen::VectorXd inp(input_dim);
  inp << 0.52861595, 0.13201344, 0.71844697, 0.5612465, 0.5696361;
  Eigen::VectorXd states(hidden_dim*rnn_layers);
  states << 0.35929263, 0.19600296, 0.026519418, 0.06038356, 0.094920635, 0.78148305, 0.82439435, 0.5376601;

  Eigen::VectorXd output, h_new;
  std::tie(output, h_new) = cell->Forward(inp, states);
  Eigen::VectorXd correct_output(output_dim);
  correct_output << 0.02758394,  0.03573444,  0.03309195, -0.00122853, -0.02679642;
  ASSERT_TRUE(output.isApprox(correct_output, 1e-5));
  Eigen::VectorXd correct_states(hidden_dim*rnn_layers);
  correct_states << 0.15862198, -0.18223548, -0.2134189, 0.066820554, -0.029244214, 0.3086748, 0.48912185, 0.36703357;
  ASSERT_TRUE(h_new.isApprox(correct_states, 1e-5));

  Eigen::MatrixXd dodx, dodh, dhdx, dhdh;
  std::tie(dodx, dodh, dhdx, dhdh) = cell->Jacobian(inp, states);
  Eigen::MatrixXd dodx_correct(output_dim, input_dim);
  dodx_correct << 5.9628866e-05, 8.618398e-05, 4.6941852e-05, -1.8819082e-07, -0.00014860564, -5.3960106e-05, -5.4041728e-05, -6.143061e-05, -5.0417737e-05, 9.11635e-05, -4.5333163e-05, -4.5862595e-05, -1.2827855e-05, 1.2337718e-05, 5.7026966e-05, 2.871167e-05, -9.082261e-06, -2.5862024e-05, -1.33724225e-05, 5.7771213e-05, 8.888676e-06, 3.4548455e-05, 8.53028e-06, -2.0453017e-05, -6.945885e-05;
  ASSERT_TRUE(dodx.isApprox(dodx_correct, 1e-5));
  Eigen::MatrixXd dodh_correct(hidden_dim*rnn_layers, input_dim);
  dodh_correct << 0.07458746, -0.11100854, -0.07461935, 0.26646015, -0.21563771, -0.1745731, -0.16501966, -0.09818033, 0.036269337, 0.046462037, 0.058994073, 0.041489754, -0.036151443, -0.03725693, -0.09241793, 0.124502905, 0.23798488, 0.2363554, 0.08349408, -0.38386542, -0.0100566195, 0.0005476104, 0.02715582, 0.034066446, -0.027574271, -0.0145347975, 0.016033076, 0.014072894, -0.00066255184, -0.06206045, -0.04300007, -0.058112882, -0.05392416, -0.03532123, 0.117219724, 0.032920722, 0.063603014, 0.04394889, 0.0046406128, -0.11632575;
  ASSERT_TRUE(dodh.isApprox(dodh_correct, 1e-5));
  Eigen::MatrixXd dhdx_correct(output_dim, hidden_dim*rnn_layers);
  dhdx_correct << -2.3999626e-05, -2.1816919e-05, 0.00029414668, 5.287294e-05, -0.00068166404, 0.00010023796, -0.00040329495, 0.0003282823, -4.548594e-05, 0.00011829033, 0.00012809227, -7.895967e-06, -0.00030313083, 0.0003872195, 0.00058617396, -7.4744974e-05, -1.5752867e-06, 7.644834e-05, -0.00021324938, 1.2291024e-05, 0.00060753233, 6.018193e-05, 0.0002793866, -0.000208775, 5.273088e-05, -0.00015892624, 4.1565552e-05, -9.6828495e-05, -0.00049049617, -0.00027178586, -0.000554919, -0.00011933914, -4.803682e-05, 7.349496e-05, 0.00024631788, 5.2143383e-05, -0.00049123715, 0.00030292702, 0.000115475625, 0.00020893663;
  ASSERT_TRUE(dhdx.isApprox(dhdx_correct, 1e-5));
  Eigen::MatrixXd dhdh_correct(rnn_layers*hidden_dim, rnn_layers*hidden_dim);
  dhdh_correct << 0.54460436, -0.0346106, -0.024376703, 0.023846222, 0.0, 0.0, 0.0, 0.0, -0.0036042165, 0.57734096, -0.09808542, 0.1876563, 0.0, 0.0, 0.0, 0.0, 0.027038988, -0.030498471, 0.6312135, -0.009999303, 0.0, 0.0, 0.0, 0.0, -0.09671981, -0.06694435, -0.08913838, 0.1962674, 0.0, 0.0, 0.0, 0.0, 0.0051386245, 0.04050146, -0.1841478, 0.040668514, 0.561879, -0.02468998, -0.06464656, -0.09464157, -0.046747632, 0.1304115, 0.09365626, 0.07878865, -0.08980167, 0.37336814, 0.052894436, 0.029514406, -0.013013048, 0.03123262, -0.018164324, -0.046895854, 0.112598345, 0.028967254, 0.7641281, -0.013589799, -0.034489103, 0.02350486, 0.16243368, 0.0626874, -0.123950474, 0.05027339, 0.20939435, 0.37836558;;
  ASSERT_TRUE(dhdh.isApprox(dhdh_correct, 1e-5));
}


// ------------------------------------------------------------
// VRED test
// ------------------------------------------------------------

TEST(rnn, VRED) {
  std::shared_ptr<RNNCell> cell;
  std::srand(SEED);
  int input_dim = 9;
  int dim_trans = 3;
  int hidden_dim = 4;
  int rnn_layers = 2;
  int src_length = 2;
  int pred_length = 5;

  // Define some Weights of network
  Eigen::MatrixXd l1Wi(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Wr(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Wn(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l1bWi(hidden_dim);
  Eigen::VectorXd l1bWr(hidden_dim);
  Eigen::VectorXd l1bWn(hidden_dim);
  Eigen::VectorXd l1bRi(hidden_dim);
  Eigen::VectorXd l1bRr(hidden_dim);
  Eigen::VectorXd l1bRn(hidden_dim);
  Eigen::MatrixXd l2Wi(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Wn(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Ri(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rr(hidden_dim, hidden_dim);
  Eigen::MatrixXd l2Rn(hidden_dim, hidden_dim);
  Eigen::VectorXd l2bWi(hidden_dim);
  Eigen::VectorXd l2bWr(hidden_dim);
  Eigen::VectorXd l2bWn(hidden_dim);
  Eigen::VectorXd l2bRi(hidden_dim);
  Eigen::VectorXd l2bRr(hidden_dim);
  Eigen::VectorXd l2bRn(hidden_dim);
  l1Wi << 0.009762700785464956, 0.013608912218786462, -0.07634511482621337, 0.02241914454448428, -0.036914329815163224, -0.06820608327089606, 0.09535221763806742, 0.01332029084131503, 0.017302586962016628, -0.05538367347187634, 0.045050855963928105, -0.07290518715550996, 0.06123879780921715, 0.06146379174500213, 0.045998112484811615, 0.043037873274483884, 0.08511932765853222, 0.02798420426550477, 0.02338679937495139, -0.027257845811475487, -0.07792497176713897, 0.020969103949009193, -0.04692210181211092, -0.0959784907625013, 0.09054980230339701, 0.0002648763853404512, -0.04034353480879385, 0.04077771670807326, 0.01382014772291866, -0.06567406454771191, 0.02055267521432877, -0.08579278836042262, -0.07132934251819073, 0.08874961570292483, 0.014039354083575928, 0.03126591789305469, 0.047852715879660335, 0.0046496106933399395, 0.06578800584347264, -0.010574924276474523, 0.09121672694464478, 0.013992982140252977, -0.07995462253753978, -0.018563340554800065, 0.004207321240825859, 0.008976636599379376, -0.08257414005969187, 0.08893378340991678, 0.03636405982069668, -0.012279697307535933, -0.07236340973027724, -0.09216244154913587, -0.08121189784831168, -0.0990609047614906, 0.06928173449422556, 0.028798039845927492, 0.018174552249634643, 0.08389652274893472, -0.0861666009089724, -0.08913240233214928;
  l1Wr << -0.015269040132219053, -0.09595632051193487, 0.004369664350014332, -0.028098419885242795, 0.09767476761184524, -0.0606835276639893, -0.04343860748471809, 0.015189299111235857, 0.03556330735924601, 0.03989585506350085, -0.015228990288364067, 0.014865049769915761, 0.04284825990982227, 0.03948575462891274, -0.06000069502071999, 0.029178822613331212, 0.0665239691095876, -0.017067612001895285, -0.012593609240131712, -0.0795910378503944, -0.02625496586780718, -0.07596068775736622, 0.08585923951524282, -0.04599840536156703, -0.04051260982897327, 0.021278642825584865, 0.030640163971426715, 0.09976940131357331, -0.009291463464386224, -0.09629564110787721, -0.0124825577474615, 0.05563135018997009, -0.04708887757907461, 0.03952623918545298, -0.05822464878103306, 0.06419864596958702, -0.04077196049557102, -0.03628620950973527, 0.047038804424518965, 0.06275956394049545, -0.0961613603381333, 0.030420654000337777, -0.07011033906840125, 0.044411119894069595, 0.058739540671484125, 0.07835460015641596, 0.07400242964936385, 0.05484673788684333, -0.08795490567414604, -0.06773809642300074, -0.08057974484138775, -0.0762544562091512, 0.03348207599273634, 0.09243770902348766, -0.020698851830603077, -0.039685036665090136, -0.013716312913205214, 0.07362521147364284, 0.07327646518572584, -0.05521506238792398;
  l1Wn << 0.09273255210020587, 0.0957236684465528, -0.008769933556690285, 0.03335334308913354, 0.030621665093079675, 0.06758898149976078, -0.036403364121204804, -0.07364042751912157, -0.0502493712960084, 0.07622063942223231, 0.03203470749853701, 0.07930931917021261, -0.06750141306472504, 0.09510430100057718, -0.03092966386061946, -0.023311696234844456, 0.059831712843344736, 0.013686789773729696, 0.03412757392363189, -0.04934167949204358, -0.08078031842120739, -0.017147401097066, 0.043265440823713114, 0.015231466883567385, 0.016254574527171745, -0.04198447855791119, -0.02648762599042069, 0.023111912856768835, 0.0711606684785222, 0.08561625869311817, 0.05834500761653291, -0.007704127549413631, -0.09624203991272898, -0.05792348778523182, -0.006737845428738745, 0.09529189300267915, -0.08717050073024313, -0.04211878141055978, 0.018408386254367803, 0.07634707237097058, 0.023603085799768303, -0.012827014946874632, -0.0752360034301117, -0.09765718316299961, 0.040882880384706555, 0.005778983950580893, 0.0561058352572911, 0.023527099415175418, -0.07421474046902934, -0.05111488159967945, -0.0062697596704596875, 0.03849442387400398, -0.06336172759857664, 0.01445038115817468, 0.03850631801555318, -0.014246259810846776, 0.07838467100313443, 0.06960164586444689, -0.02800438710432722, -0.09363221409373844;
  l1Ri << -0.06706116870041745, -0.06276139882393278, -0.09506425432173377, -0.035996569835506434, 0.0242956802999527, 0.08887447799678672, -0.0865500737073503, -0.02330722116562041, 0.015445717720833516, 0.04791015900985751, 0.03587855469971346, 0.017663422710721147, -0.052421435725098275, -0.0019082382764865902, -0.009260631088790938, 0.06620969104723809;
  l1Rr << 0.08684279958495875, -0.054517074405335354, 0.007315842221744445, 0.02579636871822974, 0.0227931911931792, -0.049128703645921416, 0.07933425860806842, 0.07453013108947906, 0.007126560604991658, -0.08839416793522488, 0.09806778947934089, -0.04529159303687285, 0.017981995270914194, -0.01311667488837584, -0.056620603120305216, 0.059609366782512746;
  l1Rn << 0.04602440590335394, -0.037640823601179485, 0.03261564062002015, -0.06287281113880956, -0.03761100090407963, 0.03926869776309189, -0.04733552465256988, 0.09055833139438893, -0.02035578755678162, -0.02444963214150382, -0.09586980010685427, 0.03749765527756305, -0.05803125020497557, -0.06407926448807305, 0.051675730767228284, -0.05689846457728831;
  l1bWi << 0.08947411809778485, 0.04617116135403157, -0.04921167148099484, -0.057337604526503605;
  l1bWr << 0.003640142786132644, -0.09486745638909369, -0.05850598491177812, -0.015062906249698749;
  l1bWn << -0.025166003933154893, -0.007284915127037855, -0.044474258741053624, 0.017356869291633756;
  l1bRi << 0.07277112118464629, -0.07649362880759339, 0.0034758214308228397, -0.07358637873096935;
  l1bRr << 0.04337193623851873, -0.020788059438541256, 0.013084262371701794, -0.06334403275718428;
  l1bRn << -0.07103044813132456, -0.002388743870209084, -0.028877452430008874, 0.08808638905056262;

  l2Wi << 0.05306505076139306, 0.033983309318182, 0.08827554094129972, -0.0005217269002674579, 0.04973272397010947, 0.05703058240462755, 0.05984051747047833, 0.027894503279744715, 0.08074394794918668, -0.043653978849210184, 0.02608958737335823, -0.0262830787740765, -0.08331551291159629, 0.017282033237265335, 0.0748575933249894, -0.07261994566288021;
  l2Wr << 0.010438493984481309, -0.08720894677580378, -0.04139594309844066, 0.06442354663884911, 0.016895213791153774, -0.002874480813075425, 0.06978871106258364, -0.062030417619448414, 0.0923872757094458, 0.09549902794888937, 0.023575338383504757, 0.002263796509291205, -0.041570494641490235, 0.07530104906331817, -0.09735262844822011, -0.05513659420505215;
  l2Wn << -0.05183424401691064, -0.03236820963263087, -0.030553296413556086, -0.0804311031011932, -0.07994121154690044, 0.0923140309082997, -0.070371827810367, 0.07243830348433666, -0.09671407408170517, -0.0536596747057591, 0.09636587796365065, 0.09458389780462606, 0.08590586335843811, 0.0898637644831363, -0.004325938592002393, 0.09216693161260003;
  l2Ri << 0.08131109984423579, -0.08409558348264885, -0.047576370152064354, -0.048115487130929016, 0.054809466539727764, -0.08207939315227893, -0.008771886639904067, -0.02523737241348771, -0.03337096959427162, 0.03440956147078289, 0.036656267109536095, 0.017519927039277808, -0.08377972200240065, -0.05092655802943105, 0.039125089127771434, -0.0454356195151066;
  l2Rr << -0.01855176571723853, -0.015892106663980304, -0.043296230683566674, -0.02582944015642226, -0.05355317156581146, 0.01147375826478339, -0.0240146088199759, -0.06058914396287207, -0.0735024730484034, 0.07211023476575876, -0.06376980765261939, -0.008028823248798528, -0.08931456364263496, 0.04540885254226565, 0.05770910246130376, -0.09107753974917719;
  l2Rn << 0.04511887284211574, -0.045934418952257076, -0.08863038471335194, 0.05995917691412361, -0.0977145082749938, -0.07370344014177449, 0.03939944834499748, -0.08460871060267346, 0.054116149700555255, -0.08892513591576041, 0.055739079188220686, 0.003767029766305205, -0.070610670919925, -0.0396802731038115, 0.05548151236975063, -0.03863798009096078;
  l2bWi << 0.015508589766275088, 0.09188666816668503, 0.029114048891200783, -0.09292751284890183;
  l2bWr << -0.013919512098387751, 0.0020033704636500393, 0.0072354989406903936, 0.03627850212076758;
  l2bWn << -0.044480780453646784, -0.07422788690673597, -0.021464864690581134, 0.09128114455918976;
  l2bRi << -0.06257382164983105, 0.0807967909856474, 0.00876119001546527, -0.008617715670846834;
  l2bRr << 0.07640828204597791, -0.00827920764628283, 0.044833527322308664, -0.020194935659379604;
  l2bRn << 0.08080887858019156, 0.03800500403824547, 0.03992441085010334, -0.034455919688576225;


  Eigen::MatrixXd  Wdense(hidden_dim, input_dim);
  Eigen::VectorXd bdense(input_dim);
  Wdense << 0.051355728547377855, 0.027212211089428257, -0.051995945324058095, -0.06789223550294872, 0.05927829490346634, 0.0918333206070445, -0.008372234547991436, 0.01819683306473699, 0.07154452883871093, -0.008555309329228586, 0.09037489536654725, 0.015150232408974479, 0.06415342414026301, 0.08176874368254769, 0.06310476375371377, -0.06811710731020881, 0.02577968781234008, -0.02031314827606459, -0.08745740959533087, -0.015193549622031607, -0.04826318662211846, 0.06980766168570215, -0.09333907469066077, 0.09179654437269472, -0.028926230305614073, -0.028658621919491423, -0.09673429946325843, -0.06295353495276321, -0.01974809983927825, 0.08585828346054278, -0.08007701395574573, 0.08906030669581591, 0.07389770610932644, -0.009167520618489647, -0.034659823646347995, -0.05345117414418863;
  bdense << 0.022892941295374863, -0.09338508170489888, -0.09687878711063436, -0.014240855500352437, -0.08638518520505596, -0.04961180235078142, -0.05576781693078323, -0.04936176125542962, -0.07378895375694845;

  Eigen::MatrixXd inp(src_length, input_dim);
  Eigen::MatrixXd deltas(pred_length - 1, input_dim);
  inp << -0.09759275542046915, -0.0769031405722504, 0.023696051902549572, 0.09485124256361008, 0.09806900031217877, -0.018189180925387682, -0.06740911479067893, 0.027752351473305847, -0.0019389306902525688, 0.0978819554568863, -0.08693915856964396, 0.05664688766276263, -0.04232030053370122, -0.0517162759846852, 0.03250091430653518, -0.05078736300180711, 0.033171823511837534, 0.00346170344045775;

  deltas << -0.015182202312830143, 0.010937561732283801, -0.042589696016074055, 0.04131494125459578, -0.017028626133287192, -0.027890887902821557, 0.06573138291114755, 0.08499338239063844, -0.09079853782254062, -0.0534746014340469, -0.030296126101487353, 0.06299329587404948, 0.09709828552865951, 0.09379434093407035, 0.08098966910998537, -0.040688746987194026, 0.09840224868289482, -0.05011599178870976, -0.07881876902355356, 0.09019052221107882, -0.05331594890638074, 0.03795365301555009, -0.08832872820388227, 0.04614181982549523, 0.07634404246676793, -0.0455126209068075, -0.024188620784514295, -0.025140763335816788, 0.049757651508026635, -0.05243855149219223, -0.0656293801904714, -0.010141670262452385, -0.0391063185245361, 0.06783782445173048, -0.05245163479687225, 0.00047789149785229523;

  std::shared_ptr<CoupledRNNCell> l1 = std::make_shared<GRUCell>(l1Wi, l1Wr, l1Wn, l1Ri, l1Rr, l1Rn, l1bWi, l1bWr, l1bWn, l1bRi, l1bRr, l1bRn);
  std::shared_ptr<CoupledRNNCell> l2 = std::make_shared<GRUCell>(l2Wi, l2Wr, l2Wn, l2Ri, l2Rr, l2Rn, l2bWi, l2bWr, l2bWn, l2bRi, l2bRr, l2bRn);
  std::vector<std::shared_ptr<CoupledRNNCell>> cells = {l1, l2};
  cell = std::make_shared<StackedCoupledRNNCell>(rnn_layers, hidden_dim, input_dim, cells, Wdense, bdense);

  VRED model(cell, dim_trans);
  Eigen::MatrixXd pred = model.Forward(inp, deltas, src_length, pred_length);
  Eigen::MatrixXd prediction_correct(pred_length, input_dim);
  prediction_correct << 0.11838228, -0.18305764, -0.03725056, -0.059239645, -0.13766977, -0.012649109, -0.10480941, -0.021929102, -0.07020987, 0.13763271, -0.28052235, -0.12989675, -0.07462179, -0.2238233, -0.05578863, -0.1542872, -0.081720024, -0.14191426, 0.15616588, -0.37870216, -0.22205383, -0.087503195, -0.31055623, -0.097770125, -0.19944398, -0.1453191, -0.21159615, 0.17429653, -0.47712743, -0.31417954, -0.097210646, -0.39788243, -0.13927448, -0.24054264, -0.21204406, -0.27942196, 0.19224423, -0.5755486, -0.40650916, -0.10326272, -0.4856908, -0.18108056, -0.27773437, -0.28136125, -0.34565303;
  ASSERT_TRUE(pred.isApprox(prediction_correct, 1e-5));

  Eigen::MatrixXd jac = model.Jacobian(inp, deltas, src_length, pred_length);
  // check some parts of jacobian:
  Eigen::MatrixXd jac22(input_dim, input_dim);
  jac22 << 3.9052244e-05, 0.00035284902, -0.00014582343, -0.0003729039, 6.174196e-05, -0.00031538977, -0.00019717013, 0.0003002243, 0.0002768166, 0.00021990151, 0.0002815799, 8.12288e-05, -0.00026979117, -0.00017550119, -0.00014738963, 0.0003206591, 0.00011856581, 8.1495724e-05, 1.9440846e-05, -0.00018105248, -8.676866e-05, 0.00029244, -9.901652e-05, 0.00034580607, 0.000116996496, 0.00059624837, -5.6933983e-05, 4.8491307e-05, 3.5216253e-06, 0.00019004259, -7.140601e-05, -3.4983736e-05, -9.5828254e-05, 0.00017096702, -0.00058913475, -0.000118430566, 0.0002484531, 0.00023973043, -6.941384e-05, -0.00012055786, -0.00024703878, 7.409048e-05, 0.0003483535, 0.0008490764, 0.00014188756, 0.00013302936, 1.2865737e-05, 0.00017526066, -5.403071e-06, -0.00015811546, 3.382149e-05, 0.00035165309, -0.00021410648, -0.00010472295, -0.00015759961, -0.00014243975, -0.00010400086, 0.000135877, 0.00014301518, 6.0027596e-05, -0.00028603987, 2.3345983e-05, 7.3205507e-07, 5.9337304e-05, 0.00022521074, -4.8553666e-05, -0.0002374319, -2.7888817e-07, -0.00018945396, -3.5608977e-05, 0.0001358104, 0.00014611731, 3.423934e-05, 0.00036220512, -0.00016468146, -0.00037798437, 6.811862e-05, -0.0003187506, -0.00021957354, 0.00034969833, 0.0002945663;
  ASSERT_TRUE(jac22.isApprox(jac.block(2*input_dim, 2*input_dim, input_dim, input_dim), 1e-5));
  Eigen::MatrixXd jac32(input_dim, input_dim);
  jac32 << 7.8843856e-05, 0.0006986676, -0.00029811566, -0.00072943803, 0.00011617626, -0.0006121755, -0.0003879967, 0.0006445681, 0.0005557698, 0.00044478575, 0.0005702326, 0.0001723032, -0.0005432009, -0.00036030135, -0.00030000412, 0.00065773947, 0.00022688463, 0.00016594646, 3.0252377e-05, -0.000369734, -0.0001752566, 0.00058908324, -0.00018872497, 0.00069061463, 0.00021887347, 0.0011754504, -0.00011680382, 9.057788e-05, 1.33761305e-05, 0.00038728805, -0.00015914797, -5.823087e-05, -0.00021541126, 0.00032712673, -0.001235559, -0.00023672187, 0.00049202744, 0.00047318925, -0.0001273219, -0.00023425846, -0.00049516145, 0.00014625458, 0.00070132146, 0.0016629024, 0.00027962335, 0.0002665343, 3.5374618e-05, 0.00034317045, -1.51780605e-05, -0.00031821843, 6.441131e-05, 0.00069931487, -0.00039726554, -0.00019653371, -0.0003264156, -0.0003309355, -0.00020378716, 0.0003184504, 0.00028888494, 0.00016073062, -0.0005697229, 3.0664345e-05, -2.907252e-05, 0.00011123969, 0.00045172678, -0.00011105209, -0.00047179137, 5.482737e-06, -0.0003776049, -9.07906e-05, 0.00030620844, 0.00030412246, 7.8010475e-05, 0.0007264384, -0.0003314819, -0.00074779906, 0.00012105609, -0.00062248943, -0.00041799006, 0.0007469728, 0.0005928005;
  ASSERT_TRUE(jac32.isApprox(jac.block(3*input_dim, 2*input_dim, input_dim, input_dim), 1e-5));
  Eigen::MatrixXd jac20(input_dim, input_dim);
  jac20 << 7.87866e-05, 0.00094780803, -0.0004375159, -0.00097520766, 0.00015157278, -0.00083062134, -0.00051748136, 0.00091791, 0.00076773023, 0.0006214075, 0.0007907535, 0.00024535856, -0.00075051654, -0.000506395, -0.0004289957, 0.0009298588, 0.00030065223, 0.00023607587, 3.3188666e-05, -0.00053083204, -0.00024968933, 0.0008304614, -0.00025601618, 0.00097016356, 0.00027419368, 0.001602138, -0.00018695678, 0.00018764463, 7.14471e-05, 0.0005802726, -0.00026405227, -0.00012328128, -0.00032120472, 0.00054013287, -0.0016758343, -0.0002983561, 0.0006586779, 0.000622693, -0.00020584674, -0.00028521445, -0.0006830247, 0.00022151213, 0.0009474344, 0.0023176062, 0.00037079578, 0.0003862975, 5.1327268e-05, 0.00050716975, -4.7030273e-05, -0.00042451784, 5.7955272e-05, 0.0009604786, -0.00065029156, -0.00028301412, -0.00045371428, -0.00041105723, -0.00031151035, 0.00039361563, 0.00040708107, 0.0001929016, -0.00081865926, 0.000102923135, -7.371567e-06, 0.00015478188, 0.0006144016, -0.00014481576, -0.000633069, -1.5530637e-05, -0.0005098974, -7.325716e-05, 0.00041244976, 0.00040872826, 5.9120488e-05, 0.0009665569, -0.0004966769, -0.0009814056, 0.00017255319, -0.0008332633, -0.0005871416, 0.0010626126, 0.0008142452;
  ASSERT_TRUE(jac20.isApprox(jac.block(2*input_dim, 0*input_dim, input_dim, input_dim), 1e-3));  // longer path through RNN --> lower precision

}

TEST(rnn, VREDspeedtest) {
  std::shared_ptr<RNNCell> cell;
  std::srand(SEED);
  int input_dim = 66;
  int dim_trans = 3;
  int hidden_dim = 100;
  int rnn_layers = 3;
  int src_length = 30;
  int pred_length = 30;
  std::vector<std::shared_ptr<CoupledRNNCell>> cells;
  // Define some Weights of network
  Eigen::MatrixXd l1Wi = Eigen::MatrixXd::Random(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Wr = Eigen::MatrixXd::Random(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Wn = Eigen::MatrixXd::Random(hidden_dim, input_dim*2-dim_trans);
  Eigen::MatrixXd l1Ri = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rr = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
  Eigen::MatrixXd l1Rn = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
  Eigen::VectorXd l1bWi = Eigen::VectorXd::Random(hidden_dim);
  Eigen::VectorXd l1bWr = Eigen::VectorXd::Random(hidden_dim);
  Eigen::VectorXd l1bWn = Eigen::VectorXd::Random(hidden_dim);
  Eigen::VectorXd l1bRi = Eigen::VectorXd::Random(hidden_dim);
  Eigen::VectorXd l1bRr = Eigen::VectorXd::Random(hidden_dim);
  Eigen::VectorXd l1bRn = Eigen::VectorXd::Random(hidden_dim);
  std::shared_ptr<CoupledRNNCell> l1 = std::make_shared<GRUCell>(l1Wi, l1Wr, l1Wn, l1Ri, l1Rr, l1Rn, l1bWi, l1bWr, l1bWn, l1bRi, l1bRr, l1bRn);
  cells.push_back(l1);

  for (int l=0; l<rnn_layers-1; ++l) {
    Eigen::MatrixXd l2Wi = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::MatrixXd l2Wr = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::MatrixXd l2Wn = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::MatrixXd l2Ri = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::MatrixXd l2Rr = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::MatrixXd l2Rn = Eigen::MatrixXd::Random(hidden_dim, hidden_dim);
    Eigen::VectorXd l2bWi = Eigen::VectorXd::Random(hidden_dim);
    Eigen::VectorXd l2bWr = Eigen::VectorXd::Random(hidden_dim);
    Eigen::VectorXd l2bWn = Eigen::VectorXd::Random(hidden_dim);
    Eigen::VectorXd l2bRi = Eigen::VectorXd::Random(hidden_dim);
    Eigen::VectorXd l2bRr = Eigen::VectorXd::Random(hidden_dim);
    Eigen::VectorXd l2bRn = Eigen::VectorXd::Random(hidden_dim);

    std::shared_ptr<CoupledRNNCell> l2 = std::make_shared<GRUCell>(l2Wi, l2Wr, l2Wn, l2Ri, l2Rr, l2Rn, l2bWi, l2bWr, l2bWn, l2bRi, l2bRr, l2bRn);
    cells.push_back(l2);

  }

  Eigen::MatrixXd Wdense = Eigen::MatrixXd::Random(hidden_dim, input_dim);
  Eigen::VectorXd bdense(input_dim);

  Eigen::MatrixXd inp =  Eigen::MatrixXd::Random(src_length, input_dim);
  Eigen::MatrixXd deltas =  Eigen::MatrixXd::Random(pred_length - 1, input_dim);
  

  cell = std::make_shared<StackedCoupledRNNCell>(rnn_layers, hidden_dim, input_dim, cells, Wdense, bdense);

  VRED model(cell, dim_trans);
  Eigen::MatrixXd pred = model.Forward(inp, deltas, src_length, pred_length);
  auto t1 = std::chrono::high_resolution_clock::now();
  Eigen::MatrixXd jac = model.Jacobian(inp, deltas, src_length, pred_length);
  auto t2 = std::chrono::high_resolution_clock::now();
  auto duration = std::chrono::duration_cast<std::chrono::milliseconds>( t2 - t1 ).count();
  cout << "Jacobian computed in " << duration << " ms" << endl;

}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
